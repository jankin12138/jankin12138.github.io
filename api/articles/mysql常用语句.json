{"title":"mysql常用语句","uid":"d198ad69ab98260fa3db17c94f83ffaa","slug":"mysql常用语句","date":"2022-10-17T09:13:29.000Z","updated":"2022-10-19T15:49:44.540Z","comments":true,"path":"api/articles/mysql常用语句.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/jankin12138/IMG@main/img/QQ截图20221017172054.3b034g09kf40.webp","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这一章是纯粹的个人笔记，所以不会按照目录的方式分类各种语句，因为有点麻烦，如果有空的话可能会整理吧，主要还是注释形式来记录一些语句的用法（因为我的mysql使用的是DataGrip所以可以比较方便的记录语句，如果有兴趣我也可以出一期安装和配置mysql已经DG的教程）</p></blockquote>\n<div align=center>\n<img src=\"https://cdn.staticaly.com/gh/jankin12138/IMG@main/img/QQ截图20221017171851.1ezdvj771274.webp\"/>\n</div>\n\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#使用Mysql\ncreate DATABASE course; #创建数据库\nuse course;#使用数据库\nshow tables ;#展示当前数据库的表名\nshow databases ;#展示所有数据库的名\nshow columns from customers; #展示一个表的内容\nshow grants;#显示授予用户的安全权限\n\n#检索数据\nSELECT prod_name from products; #从表中检索元素\n\n#排序检索数据\nSELECT prod_id,prod_name,prod_price from products order by prod_price desc,prod_name; #DESC为降序排列，默认为升序关键词为ASC\nselect  distinct vend_id from products; #distinct唯一化关键字，如果select多个将会全部相同才会删除\n\n#数据过滤\nselect prod_name,prod_price from products where prod_price between 2.50 and 10 order by prod_price; #where条件语句筛选，包括&gt; &lt; !&#x3D; between等\nselect prod_id,prod_price,prod_name from products where vend_id &#x3D;1003 and prod_price &lt;&#x3D;10;\nselect prod_name,prod_price from products where vend_id &#x3D;1003 or vend_id &#x3D;1002; #AND或OR操作符实现where语句组合\nselect prod_name,prod_price from products where vend_id &#x3D;1003 or vend_id &#x3D;1002 and prod_price&gt;&#x3D;10;\nselect prod_name,prod_price from products where (vend_id &#x3D;1003 or vend_id &#x3D;1002) and prod_price&gt;&#x3D;10;#如果使用and和or的组合操作必须使用圆括号来保证语义，否则会默认的优先处理and语句。\nselect prod_name,prod_price from products where  vend_id in(1002,1003) order by prod_name;#in操作符类似于or但是执行更快因为in只需要全部扫描一遍，但or每个语句都要扫描。\nselect prod_name,prod_price from products where  vend_id not in(1002,1003) order by prod_name;#not就是简单的取反操作\n\n#使用通配符过滤\nselect prod_id,prod_name from products where prod_name like &#39;jet%&#39;;#like操作符搜索通配符匹配，%则表示无视后续的字符串只需开头为jet，通过修改配置可以区分大小写，默认不区分\nselect prod_id,prod_name from products where prod_name like &#39;%anvil%&#39;;\nselect prod_id,prod_name from products where prod_name like &#39;1%l&#39;;\nselect prod_id,prod_name from products where prod_name like &#39;_ ton anvil&#39;;#_通配符只能替换一个字符，不能多也不能少而%可以是0个字符\n\n#使用正则表达式\nselect prod_id,prod_name from products where prod_name regexp &#39;1000|2000&#39;;\nselect prod_id,prod_name from products where prod_name regexp &#39;.000&#39;;#上面两个语句相等价，使用regexp作为操作符，需要注意的是和like不同，这里的内容可以匹配其中的一部分，而不需要使用通配符，但处理效率不高。\nselect prod_name from products where prod_name regexp &#39;[123] ton&#39;;#使用[]来定义一组字符，其中任意一个满足要求即可\nselect prod_name from products where prod_name regexp &#39;[1|2|3] ton&#39;;#与上一个语句等价\nselect prod_name from products where prod_name regexp &#39;1|2|3 ton&#39;;#如果是这样的语句将与预期出入，因为没有[]后，将会理解为匹配1或2或3 ton这样的话就会多出许多结果。\nselect prod_name from products where prod_name regexp &#39;[1-5] ton&#39;;#-表示一个范围的集合\nselect prod_name from products where prod_name regexp &#39;.&#39;;#.作为特殊字符将会输出全部结果，因此为了查找特殊字符.需要加上\\\\\nselect vend_name from vendors where vendors.vend_name regexp &#39;\\\\.&#39;;#同时还有一些预定义的字符集可以作为匹配\nselect prod_name from products where prod_name regexp &#39;\\\\([0-9] sticks?\\\\)&#39; order by prod_name;#?表示s可有可无，而（）作为特殊字符必须加上\\\\\nselect prod_name from products where prod_name regexp &#39;[[:digit:]]&#123;4&#125;&#39; order by prod_name;#&#123;&#125;表示前面的字符必须出现四次\nselect prod_name from products where prod_name regexp &#39;^[0-9\\\\.]&#39; order by prod_name;#定位元字符的使用\n\n#创建计算字段\nselect concat(vend_name , &#39; (&#39;, vend_country , &#39;)&#39;) from vendors order by vend_name;#concat()函数用于链接两个查询字段输出期望拼接成的格式\nselect concat(RTrim(vend_name) , &#39; (&#39;, vend_country , &#39;)&#39;) from vendors order by vend_name;#rtrim()去掉字符串右边的空格，同样的还有ltrim()去掉左边的空格以及trim()去掉两边的空格\nselect concat(RTrim(vend_name) , &#39; (&#39;, vend_country , &#39;)&#39;) as vend_title from vendors order by vend_name;#用as对关键词赋予别名\nselect prod_id, quantity, item_price, quantity*orderitems.item_price as expanded_price from orderitems where  order_num &#x3D; 20005;#可以通过as来实现一个计算并且输出\n#使用数据处理函数(需要注意的是，使用函数的可移植性远不如sql语句，所以一旦使用需要做好注释)\nselect vend_name, upper(vend_name) as vend_name_upcase from vendors order by vend_name;#upper()函数将字符串变成大写\nselect cust_name,cust_contact from customers where soundex(cust_contact) &#x3D; soundex(&#39;Y Lie&#39;); #soundex通过近似发音搜索匹配字符串\nselect cust_id, order_num,order_date from orders where date(order_date) &#x3D; &#39;2005-09-01&#39;;#这样的搜索并不可靠，可能会因为时间干扰检索，因此必须使用date()函数提取出日期部分\nselect cust_id, order_num,order_date from orders where date(order_date) between &#39;2005-09-01&#39; and &#39;2005-09-30&#39;;\nselect cust_id, order_num,order_date from orders where year(order_date) &#x3D; 2005 and month(order_date) &#x3D; 9;#这两个语句等价\n\n#汇总数据\nselect avg(prod_price) as avg_price from products where vend_id &#x3D; 1003;#avg()返回平均值,其只能用于单列并且忽略NULL行\nselect count(*) as num_cust from customers;#count()计数行，其中count(*)是无论空或非空，而具体列count()忽略null值\nselect count(cust_email) as num_cust from customers;#只统计非空值\nselect max(prod_price) as max_price from products;#选取最大值，对于非数据型最大值将会返回最后一行\nselect min(prod_price) as min_price from products;#选取最小值，对于非数据型最小值将会返回第一行\nselect sum(item_price*quantity) as total_price from orderitems where order_num &#x3D; 20005;#返回合计值，并且自动忽略NULL\nselect avg(distinct prod_price) as avg_price from products where vend_id &#x3D; 1003;#distinct唯一化\nselect count(*) as num_items,min(prod_price) as min,max(prod_price) as max,avg(prod_price) as avg from products;#组合查询\n\n#数据分组\nselect count(*) as num_prod from products group by vend_id;\n# GROUP BY子句可以包含任意数目的列。这使得能对分组进行嵌套，为数据分组提供更细致的控制。\n# 如果在GROUP BY子句中嵌套了分组，数据将在最后规定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算（所以不能从个别的列取回数据)。\n# GROUP BY子句中列出的每个列都必须是检索列或有效的表达式（但不能是聚集函数）。如果在SELECT中使用表达式，则必须在GROUP BY子句中指定相同的表达式。不能使用别名。\n# 除聚集计算语句外，SELECT语句中的每个列都必须在GROUP BY子句中给出。\n# 如果分组列中具有NULL值，则NULL将作为一个分组返回。如果列中有多行NULL值，它们将分为一组。\n# #ROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前\nselect cust_id,count(*) as orders from orders group by cust_id having count(*)&gt;&#x3D;2;#having类似于where唯一区别在于where并没有分组的概念因此使用having代替\nselect vend_id,count(*) as num_prods from products where prod_price&gt;&#x3D;10 group by vend_id having count(*)&gt;&#x3D;2;#综合使用where和having\nselect order_num, sum(item_price*quantity) as ordertotal from orderitems group by order_num having sum(quantity*item_price) &gt;&#x3D;50;\nselect order_num, sum(item_price*quantity) as ordertotal from orderitems group by order_num having sum(quantity*item_price) &gt;&#x3D;50 order by ordertotal;#使用order by整合group by\n\n#使用子查询\nselect cust_name,cust_contact from customers where cust_id in (select cust_id from orders where order_num in (select order_num from orderitems where prod_id &#x3D; &#39;TNT2&#39;));#子查询通过嵌套由内而外的查询\nselect  cust_name,cust_state ,(select count(*) from orders where orders.cust_id &#x3D; customers.cust_id) as orders from customers order by cust_name;#注意限定列名\nselect  cust_name,cust_state ,(select count(*) from orders where cust_id &#x3D; cust_id) as orders from customers order by cust_name;#这样会自身比较\n#联结表\nselect vend_name, prod_name, prod_price from vendors,products where vendors.vend_id &#x3D; products.vend_id order by vend_name,prod_name;#两个表查询\nselect vend_name, prod_name, prod_price from vendors,products order by vend_name,prod_name;#两个表查询,如果没有where限制将是第一个表行数与第二表行数的乘积，名为笛卡尔积\nselect vend_name, prod_name, prod_price from vendors inner join products on vendors.vend_id &#x3D; products.vend_id;#inner join内部联结适用于等值联结\nselect prod_name, vend_name, prod_price, quantity from orderitems, products, vendors where vendors.vend_id &#x3D; products.vend_id and products.prod_id&#x3D;orderitems.prod_id and order_num&#x3D;20005;\n#创建高级联结\nselect cust_name, cust_contact from customers as c,orders as o, orderitems as oi where c.cust_id &#x3D; o.cust_id and oi.order_num &#x3D; o.order_num and prod_id &#x3D; &#39;TNT2&#39;;#使用别名简化语句\nselect p1.prod_id, p1.prod_name from products as p1 , products as p2 where p1.vend_id &#x3D; p2.vend_id and p2.prod_id &#x3D; &#39;DTNTR&#39;;#自联结，将自己的表作为别名\nselect customers.cust_id, order_num from customers left outer join orders on customers.cust_id &#x3D; orders.cust_id;#外联结需要left和right关键词决定驱动表\nselect customers.cust_name, customers.cust_id,count(o.cust_id) as num_ord from customers  left outer join orders o on customers.cust_id &#x3D; o.cust_id group by customers.cust_id;#聚集函数count使用group by就可以分组\n#组合查询\nselect vend_id, prod_id, prod_price from products where prod_price&lt;&#x3D;5\nunion\nselect vend_id, prod_id, prod_price from products where vend_id in (1001,1002);#union可以联结两个语句，将其拼接式的输入，在这个简单例子里等价于or\nselect vend_id, prod_id, prod_price from products where prod_price&lt;&#x3D;5\nunion all\nselect vend_id, prod_id, prod_price from products where vend_id in (1001,1002) order by vend_id,prod_price;#加上all后会输出重复的行,group by正常排序\n#插入数据\ninsert into customers values (null,&#39;Pep E. LaPew&#39;,&#39;100 Main Street&#39;,&#39;Los Angeles&#39;,&#39;CA&#39;,&#39;90046&#39;,&#39;USA&#39;,null,null);\n#更新和删除数据\nupdate customers set cust_email&#x3D;&#39;elmer@fudd.com&#39; where cust_id &#x3D; 10005;\nupdate customers set cust_email&#x3D;&#39;null&#39; where cust_id &#x3D; 10005;#删除某一行的列数据就是设置成null\ndelete from customers where cust_id &#x3D; 10006;#删除整行\n#创建表\ncreate table test(\n    cust_id int not null auto_increment,\n    cust_name char(50) not null DEFAULT 1,#指定默认值为1\n    cust_address char(50) not null ,#not null即不能为null\n    primary key (cust_id)#指定主键\n)engine &#x3D; innodb;#指定引擎\nalter table test add tmp char(20);#添加新列\nalter table test drop column tmp;#删除新加列\ndrop table test;#永久删除表，慎用，没有确认直接执行\nrename table test to test1;\n#使用视图\ncreate  view productcustomers as select cust_name, cust_contact, prod_id from customers ,orders , orderitems  where orders.cust_id &#x3D; customers.cust_id and orders.order_num &#x3D; orderitems.order_num ;\ndrop view productcustomers;#删除视图\nselect cust_name,cust_contact from productcustomers where prod_id &#x3D; &#39;TNT2&#39;;\nselect * from productcustomers;\n#视图很少更新因为使用分组，联结，子查询，并，聚集函数，distinc，导出都会导致试图无法更新。\n#存储过程\ncall productpricing(@pricelow,@pricehigh,@priceaverage);#使用存储过程，mysql所有变量都必须以@开始\ncreate procedure productpricing()\nbegin\n    select avg(prod_price) as priceaverage\n    from products;\nend;#创建一个存储过程，类似于函数\ncall productpricing();#使用存储过程\ndrop procedure productpricing;#删除例程\ncreate procedure productpricing(\n out pl decimal(8,2),\n out ph decimal(8,2),\n out pa decimal(8,2)\n)#out为输出，in为输入\nbegin\n    select min(prod_price) into pl from products;\n    select max(prod_price) into ph from products;\n    select avg(prod_price) into pa from products;\nend;#创建含参例程\nselect @pricehigh ,@priceaverage,@pricelow;\ncreate procedure processorders()\n#游标好像没什么用\nbegin\n    declare ordernumbers cursor for select order_num from orders;\n    open ordernumbers;\n    close ordernumbers;\nend;\ndrop procedure processorders;\n#触发器\ncreate trigger newproduct after insert on products\nfor each row select &#39;Producet added&#39; into @tmp;#创建触发器，需要存在变量中\ninsert into products values (&#39;ANV&#39;,1005,&#39;.123456&#39;,3.855,&#39;123123&#39;);\nselect @tmp;\n#事务处理\ninsert into test1 values(1231,&#39;123&#39;,&#39;123213123&#39;);\nstart transaction;#事务开始\ndelete from test1;\nselect * from test1;\nsavepoint del1;#事务保存点方便回滚\ninsert into test1 values(321,&#39;123&#39;,&#39;123213123&#39;);\nselect * from test1;\nrollback ;#事务回滚\nselect * from test1;\n\nstart transaction ;\ndelete from orderitems where order_num &#x3D; 20010;\ndelete from orders where order_num &#x3D;20010;\ncommit ;\nshow character set ;\nuse mysql;\nselect user from user;\nanalyze table orders;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<div align=center>\n<img src=\"https://cdn.staticaly.com/gh/jankin12138/IMG@main/img/QQ截图20221018012810.ditlvtayjm0.webp\"/>\n</div>\n\n<div align=center>\n<img src=\"https://cdn.staticaly.com/gh/jankin12138/IMG@main/img/QQ截图20221018012817.2pb2j32gqoc0.webp\"/>\n</div>\n\n<div align=center>\n<img src=\"https://cdn.staticaly.com/gh/jankin12138/IMG@main/img/QQ截图20221018012759.4ve7u0fd6ni0.webp\"/>\n</div>\n\n<div align=center>\n<img src=\"https://cdn.staticaly.com/gh/jankin12138/IMG@main/img/QQ截图20221018012804.4hr9xsn08ha0.webp\"/>\n</div>\n\n<div align=center>\n<img src=\"https://cdn.staticaly.com/gh/jankin12138/IMG@main/img/QQ截图20221018012734.5swljrekj0k0.webp\"/>\n</div>\n\n<div align=center>\n<img src=\"https://cdn.staticaly.com/gh/jankin12138/IMG@main/img/QQ截图20221018012745.485de5flyfu0.webp\"/>\n</div>\n\n<div align=center>\n<img src=\"https://cdn.staticaly.com/gh/jankin12138/IMG@main/img/QQ截图20221018012841.5g6n4odd5as0.webp\"/>\n</div>\n\n\n\n<div align=center>\n<img src=\"https://cdn.staticaly.com/gh/jankin12138/IMG@main/img/QQ截图20221018012844.1owt5gzybwe8.webp\"/>\n</div>\n\n<div align=center>\n<img src=\"https://cdn.staticaly.com/gh/jankin12138/IMG@main/img/QQ截图20221018012824.3qx1r8z9rba0.webp\"/>\n</div>\n","text":" 这一章是纯粹的个人笔记，所以不会按照目录的方式分类各种语句，因为有点麻烦，如果有空的话可能会整理吧，主要还是注释形式来记录一些语句的用法（因为我的mysql使用的是DataGrip所以可以比较方便的记录语句，如果有兴趣我也可以出一期安装和配置mysql已经DG的教程） #使用M...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"数据库","slug":"数据库","count":7,"path":"api/categories/数据库.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":7,"path":"api/tags/MySQL.json"},{"name":"框架学习","slug":"框架学习","count":7,"path":"api/tags/框架学习.json"},{"name":"基础概念","slug":"基础概念","count":7,"path":"api/tags/基础概念.json"}],"toc":"","author":{"name":"依水何安","slug":"blog-author","avatar":"/img/123.png","link":"/","description":"一个抽象的码农","socials":{"github":"https://github.com/jankin12138","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/img/bilibili.png","link":"https://space.bilibili.com/14624621?spm_id_from=333.1007.0.0"},"leetcode":{"icon":"/img/leetcode.png","link":"https://leetcode.cn/u/yi-shui-he-an-o/"}}}},"mapped":true,"prev_post":{"title":"计算机网络笔记","uid":"09f2766bd638543cf5a9ec60a938ae77","slug":"计算机网络笔记","date":"2022-10-19T13:57:03.000Z","updated":"2022-10-24T13:17:39.450Z","comments":true,"path":"api/articles/计算机网络笔记.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/jankin12138/IMG@main/img/QQ截图20221019220156.4lypoz67vm60.webp","text":" 本文参考了小林coding以及自顶向下方法等计算机网络教程，写了一篇个人的笔记，其中也包含了本人对于一些小问题的记录和思考，以及整体框架的梳理。 基础知识 对于不同设备间的通信就需要使用网络通信，而设备是多样性的，所以要兼容设备就需要一套通用的网络协议 TCP&#x2F;IP网...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"计算机网络","slug":"计算机网络","count":1,"path":"api/categories/计算机网络.json"}],"tags":[{"name":"计算机网络","slug":"计算机网络","count":2,"path":"api/tags/计算机网络.json"},{"name":"基础知识","slug":"基础知识","count":2,"path":"api/tags/基础知识.json"}],"author":{"name":"依水何安","slug":"blog-author","avatar":"/img/123.png","link":"/","description":"一个抽象的码农","socials":{"github":"https://github.com/jankin12138","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/img/bilibili.png","link":"https://space.bilibili.com/14624621?spm_id_from=333.1007.0.0"},"leetcode":{"icon":"/img/leetcode.png","link":"https://leetcode.cn/u/yi-shui-he-an-o/"}}}}},"next_post":{"title":"奇怪的小问题","uid":"5f1d861065ff3b07fbdc6d6fa1d8207a","slug":"奇怪的小问题","date":"2022-10-13T08:14:34.000Z","updated":"2022-10-19T15:32:58.047Z","comments":true,"path":"api/articles/奇怪的小问题.json","keywords":null,"cover":"https://cdn.staticaly.com/gh/jankin12138/IMG@main/img/QQ截图20221013184546.3gx9eojoene0.webp","text":" 这个文章主要是记录一些平常突发奇想的一些小问题，所以没有什么顺序，如果你也有同样的疑惑希望可以帮到你。 DFS先判断后递归还是先递归后判断 今天像往常一样在写DFS突然冒出了一个奇怪的想法，究竟应该先递归还是应该先判断，然后就有了这个问题的探究。先说结论：都可以，几乎没有区别，...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"日常记录","slug":"日常记录","count":1,"path":"api/categories/日常记录.json"}],"tags":[{"name":"日常记录","slug":"日常记录","count":1,"path":"api/tags/日常记录.json"}],"author":{"name":"依水何安","slug":"blog-author","avatar":"/img/123.png","link":"/","description":"一个抽象的码农","socials":{"github":"https://github.com/jankin12138","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/img/bilibili.png","link":"https://space.bilibili.com/14624621?spm_id_from=333.1007.0.0"},"leetcode":{"icon":"/img/leetcode.png","link":"https://leetcode.cn/u/yi-shui-he-an-o/"}}}}}}